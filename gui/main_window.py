"""Main window for Gource GUI application"""
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import os
from typing import Optional

from utils.config import ConfigManager
from core.repository_validator import RepositoryValidator, RepositoryInfo
from core.gource_runner import GourceRunner
from gui.settings_panel import SettingsPanel
from gui.repository_preview import RepositoryPreview

class GourceGUIApp:
    """Main application window for Gource GUI"""
    
    def __init__(self, root: tk.Tk):
        self.root = root
        self.config = ConfigManager()
        self.validator = RepositoryValidator()
        self.runner = GourceRunner()
        
        self.current_repo_path = ""
        self.current_repo_info: Optional[RepositoryInfo] = None
        
        self._setup_ui()
        self._load_settings()
        
        # Check if Gource is installed
        if not self.runner.check_gource_installed():
            self._show_installation_dialog()
    
    def _setup_ui(self):
        """Set up the user interface"""
        self.root.title("Gource GUI - Version Control Visualization")
        
        # Create menu bar
        self._create_menu_bar()
        
        # Create main container
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Create repository selection area
        self._create_repo_selection(main_frame)
        
        # Create notebook for settings and preview
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        # Repository preview tab
        self.preview_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.preview_frame, text="Repository Info")\n        self.repo_preview = RepositoryPreview(self.preview_frame)\n        \n        # Settings panel tabs\n        self.settings_frame = ttk.Frame(self.notebook)\n        self.notebook.add(self.settings_frame, text="Settings")\n        self.settings_panel = SettingsPanel(self.settings_frame, self.config)\n        \n        # Create action buttons\n        self._create_action_buttons(main_frame)\n        \n        # Create status bar\n        self._create_status_bar()\n    \n    def _create_menu_bar(self):\n        \"\"\"Create the application menu bar\"\"\"\n        menubar = tk.Menu(self.root)\n        self.root.config(menu=menubar)\n        \n        # File menu\n        file_menu = tk.Menu(menubar, tearoff=0)\n        menubar.add_cascade(label="File", menu=file_menu)\n        file_menu.add_command(label="Open Repository...", command=self._browse_repository, accelerator="Ctrl+O")\n        file_menu.add_separator()\n        \n        # Recent repositories submenu\n        self.recent_menu = tk.Menu(file_menu, tearoff=0)\n        file_menu.add_cascade(label="Recent Repositories", menu=self.recent_menu)\n        self._update_recent_menu()\n        \n        file_menu.add_separator()\n        file_menu.add_command(label="Exit", command=self.root.quit)\n        \n        # Settings menu\n        settings_menu = tk.Menu(menubar, tearoff=0)\n        menubar.add_cascade(label="Settings", menu=settings_menu)\n        settings_menu.add_command(label="Reset to Defaults", command=self._reset_settings)\n        \n        # Help menu\n        help_menu = tk.Menu(menubar, tearoff=0)\n        menubar.add_cascade(label="Help", menu=help_menu)\n        help_menu.add_command(label="About Gource", command=self._show_about_gource)\n        help_menu.add_command(label="Installation Help", command=self._show_installation_dialog)\n        help_menu.add_command(label="About", command=self._show_about)\n        \n        # Bind keyboard shortcuts\n        self.root.bind('<Control-o>', lambda e: self._browse_repository())\n        self.root.bind('<Control-r>', lambda e: self._run_gource())\n    \n    def _create_repo_selection(self, parent):\n        \"\"\"Create repository selection widgets\"\"\"\n        repo_frame = ttk.LabelFrame(parent, text="Repository Selection", padding=10)\n        repo_frame.pack(fill=tk.X, pady=(0, 10))\n        \n        # Path entry and browse button\n        path_frame = ttk.Frame(repo_frame)\n        path_frame.pack(fill=tk.X)\n        \n        ttk.Label(path_frame, text="Repository Path:\").pack(side=tk.LEFT)\n        \n        self.repo_path_var = tk.StringVar()\n        self.repo_path_var.trace('w', self._on_repo_path_changed)\n        \n        self.path_entry = ttk.Entry(path_frame, textvariable=self.repo_path_var)\n        self.path_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 5))\n        \n        ttk.Button(path_frame, text="Browse...", command=self._browse_repository).pack(side=tk.RIGHT)\n        \n        # Validation status\n        status_frame = ttk.Frame(repo_frame)\n        status_frame.pack(fill=tk.X, pady=(5, 0))\n        \n        self.status_label = ttk.Label(status_frame, text="No repository selected\")\n        self.status_label.pack(side=tk.LEFT)\n        \n        # Validation indicator\n        self.status_indicator = ttk.Label(status_frame, text=\"\")\n        self.status_indicator.pack(side=tk.RIGHT)\n    \n    def _create_action_buttons(self, parent):\n        \"\"\"Create action buttons\"\"\"\n        button_frame = ttk.Frame(parent)\n        button_frame.pack(fill=tk.X, pady=(10, 0))\n        \n        # Left side buttons\n        left_buttons = ttk.Frame(button_frame)\n        left_buttons.pack(side=tk.LEFT)\n        \n        self.preview_button = ttk.Button(left_buttons, text=\"Preview Command\", \n                                        command=self._preview_command)\n        self.preview_button.pack(side=tk.LEFT, padx=(0, 5))\n        \n        # Right side buttons\n        right_buttons = ttk.Frame(button_frame)\n        right_buttons.pack(side=tk.RIGHT)\n        \n        self.export_button = ttk.Button(right_buttons, text=\"Export Video\", \n                                       command=self._export_video)\n        self.export_button.pack(side=tk.RIGHT, padx=(5, 0))\n        \n        self.run_button = ttk.Button(right_buttons, text=\"Run Gource\", \n                                    command=self._run_gource, style='Accent.TButton')\n        self.run_button.pack(side=tk.RIGHT, padx=(5, 0))\n        \n        self.stop_button = ttk.Button(right_buttons, text=\"Stop\", \n                                     command=self._stop_gource, state=tk.DISABLED)\n        self.stop_button.pack(side=tk.RIGHT, padx=(5, 0))\n    \n    def _create_status_bar(self):\n        \"\"\"Create status bar\"\"\"\n        self.status_bar = ttk.Label(self.root, text=\"Ready\", relief=tk.SUNKEN)\n        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)\n    \n    def _browse_repository(self):\n        \"\"\"Open file dialog to browse for repository\"\"\"\n        initial_dir = self.config.get(\"last_export_dir\", os.path.expanduser(\"~\"))\n        \n        repo_path = filedialog.askdirectory(\n            title=\"Select Git Repository Folder\",\n            initialdir=initial_dir\n        )\n        \n        if repo_path:\n            self.repo_path_var.set(repo_path)\n    \n    def _on_repo_path_changed(self, *args):\n        \"\"\"Handle repository path changes\"\"\"\n        repo_path = self.repo_path_var.get().strip()\n        \n        if not repo_path:\n            self._set_repo_status(\"No repository selected\", \"\")\n            self.current_repo_info = None\n            self.repo_preview.clear()\n            return\n        \n        if not os.path.exists(repo_path):\n            self._set_repo_status(\"Path does not exist\", \"✗\", \"red\")\n            self.current_repo_info = None\n            self.repo_preview.clear()\n            return\n        \n        # Validate repository in background\n        self.root.after(100, lambda: self._validate_repository(repo_path))\n    \n    def _validate_repository(self, repo_path: str):\n        \"\"\"Validate repository and update UI\"\"\"\n        try:\n            self._set_status(\"Validating repository...\")\n            repo_info = self.validator.validate_repository(repo_path)\n            \n            if repo_info.is_valid:\n                self._set_repo_status(f\"Valid {repo_info.repo_type} repository\", \"✓\", \"green\")\n                self.current_repo_path = repo_path\n                self.current_repo_info = repo_info\n                self.repo_preview.update_info(repo_info)\n                \n                # Add to recent repositories\n                self.config.add_recent_repository(repo_path)\n                self._update_recent_menu()\n                \n                self._set_status(\"Repository loaded successfully\")\n            else:\n                self._set_repo_status(repo_info.error_message, \"✗\", \"red\")\n                self.current_repo_info = None\n                self.repo_preview.clear()\n                self._set_status(\"Repository validation failed\")\n                \n        except Exception as e:\n            self._set_repo_status(f\"Error: {str(e)}\", \"✗\", \"red\")\n            self.current_repo_info = None\n            self.repo_preview.clear()\n            self._set_status(\"Error validating repository\")\n    \n    def _set_repo_status(self, message: str, indicator: str = \"\", color: str = \"black\"):\n        \"\"\"Update repository status display\"\"\"\n        self.status_label.config(text=message)\n        self.status_indicator.config(text=indicator, foreground=color)\n        \n        # Enable/disable buttons based on validation status\n        has_valid_repo = (indicator == \"✓\")\n        state = tk.NORMAL if has_valid_repo else tk.DISABLED\n        \n        self.preview_button.config(state=state)\n        self.run_button.config(state=state)\n        self.export_button.config(state=state)\n    \n    def _set_status(self, message: str):\n        \"\"\"Update status bar\"\"\"\n        self.status_bar.config(text=message)\n        self.root.update_idletasks()\n    \n    def _update_recent_menu(self):\n        \"\"\"Update recent repositories menu\"\"\"\n        self.recent_menu.delete(0, tk.END)\n        \n        recent_repos = self.config.get_recent_repositories()\n        if not recent_repos:\n            self.recent_menu.add_command(label=\"(No recent repositories)\", state=tk.DISABLED)\n        else:\n            for repo_path in recent_repos:\n                repo_name = os.path.basename(repo_path)\n                self.recent_menu.add_command(\n                    label=f\"{repo_name} - {repo_path}\",\n                    command=lambda p=repo_path: self.repo_path_var.set(p)\n                )\n    \n    def _preview_command(self):\n        \"\"\"Preview the Gource command that would be executed\"\"\"\n        if not self.current_repo_info or not self.current_repo_info.is_valid:\n            messagebox.showwarning(\"No Repository\", \"Please select a valid repository first.\")\n            return\n        \n        settings = self.settings_panel.get_settings()\n        cmd = self.runner.build_command(self.current_repo_path, settings)\n        \n        # Show command in a dialog\n        dialog = tk.Toplevel(self.root)\n        dialog.title(\"Gource Command Preview\")\n        dialog.geometry(\"600x400\")\n        dialog.transient(self.root)\n        \n        # Command text\n        text_frame = ttk.Frame(dialog)\n        text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n        \n        ttk.Label(text_frame, text=\"Generated Gource Command:\").pack(anchor=tk.W)\n        \n        text_widget = tk.Text(text_frame, wrap=tk.WORD, height=15)\n        text_widget.pack(fill=tk.BOTH, expand=True, pady=(5, 0))\n        \n        scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=text_widget.yview)\n        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)\n        text_widget.config(yscrollcommand=scrollbar.set)\n        \n        # Format command nicely\n        formatted_cmd = \" \\\\\n  \".join(cmd)\n        text_widget.insert(tk.END, formatted_cmd)\n        text_widget.config(state=tk.DISABLED)\n        \n        # Buttons\n        button_frame = ttk.Frame(dialog)\n        button_frame.pack(fill=tk.X, padx=10, pady=(0, 10))\n        \n        ttk.Button(button_frame, text=\"Copy to Clipboard\", \n                  command=lambda: self._copy_to_clipboard(\" \".join(cmd))).pack(side=tk.LEFT)\n        ttk.Button(button_frame, text=\"Close\", command=dialog.destroy).pack(side=tk.RIGHT)\n    \n    def _copy_to_clipboard(self, text: str):\n        \"\"\"Copy text to clipboard\"\"\"\n        self.root.clipboard_clear()\n        self.root.clipboard_append(text)\n        self.root.update()  # Ensure clipboard is updated\n        messagebox.showinfo(\"Copied\", \"Command copied to clipboard!\")\n    \n    def _run_gource(self):\n        \"\"\"Run Gource with current settings\"\"\"\n        if not self.current_repo_info or not self.current_repo_info.is_valid:\n            messagebox.showwarning(\"No Repository\", \"Please select a valid repository first.\")\n            return\n        \n        settings = self.settings_panel.get_settings()\n        \n        # Update button states\n        self.run_button.config(state=tk.DISABLED)\n        self.stop_button.config(state=tk.NORMAL)\n        \n        def on_output(message):\n            self._set_status(f\"Gource: {message}\")\n        \n        def on_error(message):\n            self._set_status(f\"Error: {message}\")\n            # Reset button states on error\n            self.root.after(0, lambda: [\n                self.run_button.config(state=tk.NORMAL),\n                self.stop_button.config(state=tk.DISABLED)\n            ])\n        \n        success = self.runner.run_gource(\n            self.current_repo_path,\n            settings,\n            output_callback=on_output,\n            error_callback=on_error\n        )\n        \n        if success:\n            self._set_status(\"Gource started successfully\")\n        else:\n            self.run_button.config(state=tk.NORMAL)\n            self.stop_button.config(state=tk.DISABLED)\n    \n    def _stop_gource(self):\n        \"\"\"Stop running Gource\"\"\"\n        if self.runner.stop_gource():\n            self._set_status(\"Gource stopped\")\n        else:\n            self._set_status(\"Failed to stop Gource\")\n        \n        self.run_button.config(state=tk.NORMAL)\n        self.stop_button.config(state=tk.DISABLED)\n    \n    def _export_video(self):\n        \"\"\"Export Gource visualization to video\"\"\"\n        if not self.current_repo_info or not self.current_repo_info.is_valid:\n            messagebox.showwarning(\"No Repository\", \"Please select a valid repository first.\")\n            return\n        \n        # File dialog for output location\n        output_file = filedialog.asksaveasfilename(\n            title=\"Save Video As\",\n            defaultextension=\".mp4\",\n            filetypes=[\n                (\"MP4 Video\", \"*.mp4\"),\n                (\"MOV Video\", \"*.mov\"),\n                (\"All Files\", \"*.*\")\n            ]\n        )\n        \n        if not output_file:\n            return\n        \n        settings = self.settings_panel.get_settings()\n        \n        def on_progress(message):\n            self._set_status(f\"Export: {message}\")\n        \n        def on_error(message):\n            self._set_status(f\"Export Error: {message}\")\n            messagebox.showerror(\"Export Failed\", f\"Video export failed:\\n\\n{message}\")\n        \n        self._set_status(\"Starting video export...\")\n        \n        # Run export in a thread to avoid blocking UI\n        import threading\n        def export_thread():\n            success = self.runner.run_gource_video_export(\n                self.current_repo_path,\n                settings,\n                output_file,\n                progress_callback=on_progress,\n                error_callback=on_error\n            )\n            \n            if success:\n                self.root.after(0, lambda: [\n                    self._set_status(\"Video export completed successfully\"),\n                    messagebox.showinfo(\"Export Complete\", \n                                      f\"Video exported successfully to:\\n{output_file}\")\n                ])\n        \n        threading.Thread(target=export_thread, daemon=True).start()\n    \n    def _reset_settings(self):\n        \"\"\"Reset all settings to defaults\"\"\"\n        if messagebox.askyesno(\"Reset Settings\", \n                              \"Are you sure you want to reset all settings to their default values?\"):\n            self.config.reset_to_defaults()\n            self.settings_panel.load_from_config()\n            self._set_status(\"Settings reset to defaults\")\n    \n    def _show_installation_dialog(self):\n        \"\"\"Show Gource installation instructions\"\"\"\n        instructions = self.runner.get_installation_instructions()\n        \n        dialog = tk.Toplevel(self.root)\n        dialog.title(\"Gource Installation\")\n        dialog.geometry(\"500x400\")\n        dialog.transient(self.root)\n        \n        text_widget = tk.Text(dialog, wrap=tk.WORD, padx=10, pady=10)\n        text_widget.pack(fill=tk.BOTH, expand=True)\n        text_widget.insert(tk.END, instructions)\n        text_widget.config(state=tk.DISABLED)\n        \n        ttk.Button(dialog, text=\"Close\", command=dialog.destroy).pack(pady=10)\n    \n    def _show_about_gource(self):\n        \"\"\"Show about Gource dialog\"\"\"\n        about_text = \"\"\"Gource - Version Control Visualization\n\nGource is a software version control visualization tool that displays the history of a project as an animated tree. Contributors appear and disappear as they make changes to specific files and directories.\n\nFor more information, visit: https://gource.io\n\nSupported version control systems:\n• Git\n• SVN (Subversion)\n• Mercurial\n• Bazaar\n• CVS\"\"\"\n        \n        messagebox.showinfo(\"About Gource\", about_text)\n    \n    def _show_about(self):\n        \"\"\"Show about dialog\"\"\"\n        about_text = \"\"\"Gource GUI v1.0\n\nA graphical user interface for Gource version control visualization.\n\nBuilt with Python and Tkinter.\n\nFeatures:\n• Easy repository selection\n• Comprehensive settings panel\n• Video export capabilities\n• Command preview\n• Cross-platform support\"\"\"\n        \n        messagebox.showinfo(\"About Gource GUI\", about_text)\n    \n    def _load_settings(self):\n        \"\"\"Load settings from config\"\"\"\n        # Load window size and position\n        width = self.config.get(\"window.width\", 900)\n        height = self.config.get(\"window.height\", 700)\n        \n        x = self.config.get(\"window.x\")\n        y = self.config.get(\"window.y\")\n        \n        if x is not None and y is not None:\n            self.root.geometry(f\"{width}x{height}+{x}+{y}\")\n        else:\n            self.root.geometry(f\"{width}x{height}\")\n    \n    def _save_settings(self):\n        \"\"\"Save settings to config\"\"\"\n        # Save window size and position\n        self.config.set(\"window.width\", self.root.winfo_width())\n        self.config.set(\"window.height\", self.root.winfo_height())\n        self.config.set(\"window.x\", self.root.winfo_x())\n        self.config.set(\"window.y\", self.root.winfo_y())\n        \n        # Save other settings\n        self.settings_panel.save_to_config()\n        \n        # Write config to file\n        self.config.save_config()\n    \n    def __del__(self):\n        \"\"\"Cleanup on destruction\"\"\"\n        try:\n            self._save_settings()\n        except:\n            pass  # Ignore errors during cleanup
